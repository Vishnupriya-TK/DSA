//Leetcode Problems - Medium Level

// 54. Spiral Matrix
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {       
        //result
        List<Integer> res = new ArrayList<>();
        //Initialize
        int cols=0;
        int rows=0;
        int rowe=matrix.length-1;
        int cole=matrix[0].length-1;       
       //Logic
while(cols<=cole && rows<=rowe){ 
       for(int i=cols;i<=cole;i++){
        res.add(matrix[rows][i]);
       }
       rows++;
       for(int i=rows;i<=rowe;i++){
        res.add(matrix[i][cole]);
       }
        cole--;
       if(rows<=rowe){
        for(int i=cole;i>=cols;i--){
            res.add(matrix[rowe][i]);
        }
         rowe--;
       }
        if(cols<=cole){
           for(int i=rowe;i>=rows;i--){
            res.add(matrix[i][cols]);
           } 
           cols++;
        }
}
return res;
    }
}
-----------------------------------------------------------------------------------
// 59. Spiral Matrix 
class Solution {
    public int[][] generateMatrix(int n) {
        int[][] mat = new int[n][n];
        int val=1;
        int rs=0, cs=0, re=n-1, ce=n-1;
        while(cs<=ce && rs<=re){
            for(int i=cs;i<=ce;i++){
                mat[rs][i]=val++;
            }
            rs++;
            for(int i=rs;i<=re;i++){
                mat[i][ce]=val++;
            }
            ce--;
            if(rs<=re){
                for(int i=ce;i>=cs;i--){
                    mat[re][i]=val++;
                }
                re--;
            }
            if(cs<=ce){
                for(int i=re;i>=rs;i--){
                    mat[i][cs]=val++;
                }
                cs++;
}   }
        return mat;
}   }
------------------------------------------------------------------------------
// 167. Two Sum II - Input Array Is Sorted

// class Solution {
//     public int[] twoSum(int[] numbers, int target) {
//         int n=numbers.length;
//         // ArrayList<Integer>res=new ArrayList<>();
//         for(int i=0;i<n;i++){
//             for(int j=i+1;j<n;j++){
//                int sum=numbers[i]+numbers[j];
//                if(sum==target){
//                 ArrayList<Integer>res=new ArrayList<>();
//                 res.add(i+1);
//                 res.add(j+1);
//                 //res.add(i+1,j+1);
//                 // return res;
//                 return res.stream().mapToInt(Integer::intValue).toArray(); 
//                }
//             }
//         }
//         return new int[]{-1,-1};
//     }
// }

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int start = 0;
        int end = numbers.length - 1;
        while (start <= end) {
            int sum = numbers[start] + numbers[end];
            if (sum == target)
                return new int[] { start + 1, end + 1 };
            else if (sum > target)
                end--;
            else
                start++;
        }
        return new int[] { -1, -1 };
    }
}
------------------------------------------------------------------------------------------
// 15. 3 sum

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>>res=new ArrayList<>();
        int n=nums.length;
        Arrays.sort(nums);
        for(int i=0;i<n;i++){
            if(i>0 && nums[i-1]==nums[i]) continue;
            int l=i+1;
            int r=n-1;
            while(l<r){
                int tot=nums[i]+nums[l]+nums[r];
                if(tot==0){
                    res.add(Arrays.asList(nums[i],nums[l],nums[r]));
                    while(l<r && nums[l]==nums[l+1]) l++;
                    while(r>l && nums[r]==nums[r-1]) r--;
                    l++;
                    r--;
                }
                 else if(tot<0) l++;
                 else if(tot>0) r--;
            }
        }
        return res;
    }
}
---------------------------------------------------------------------------------------
// 18. 4Sum

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res= new ArrayList<>();
        int n =nums.length;
        Arrays.sort(nums);
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<n;j++){
                if(j!=i+1 && nums[j]==nums[j-1]) continue;
                int k=j+1;
                int l=n-1;
                while(k<l){
                    long sum = nums[i];
                    sum += nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if(sum==target){
                        res.add(Arrays.asList(nums[i],nums[j],nums[k],nums[l]));
                        k++; l--;
                        while(k<l && nums[k]==nums[k-1]) k++;
                        while(k<l && nums[l]==nums[l+1]) l--;

                    }
                    else if(sum<target) k++;
                    else if(sum>target) l--;
                }
            }
        }
        
        return res;
    }
}
---------------------------------------------------------------------------------
